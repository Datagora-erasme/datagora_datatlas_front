{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udf0d DatAtlas DatAtlas allows you to create a map of the territory on the fly by embedding data from different sources: open sourced data but also crowdsourced data All infos about the front and the back are stored here React Front using kepler.gl Front Setup more infos here WIP Using docker The easiest way to launch datAtlas can be by using docker-compose Clone the repo https://github.com/datatlas-erasme/front.git Copy env.example and rename it into .env Put your mapbox token in the .env file Launch DatAtlas docker-compose up Now you can access the server trough http://localhost:5007 Manually Requirements - nodejs - a mapbox api access token Clone the repo https://github.com/datatlas-erasme/front.git Copy env.example and rename it into .env Put your mapbox token in the .env file [WIP TODO] - Change the backend var URl Install and start npm npm install npm start Back Setup more infos here WIP How does datatlas work [WIP] Datatlas is made of a front and a back The front is a keplergl surcharged with a styling and theme management [WIP] The back is here to give the front the styling,dataset configuration and urls He is also able to handle notion tables he converts into a readable keplergl json format (and soon other unconventionnal data sources / unconventionnal => no geojson ) The front needs the back server to know : - wich data layers he needs to load - wich name he has (ex: Datatlas-Industries) - wich optionnal button he has (ex: crowdsourcing buttons to add a new point on the map) - how are the layers and filters configured by default two API routes are used for it : GET api/ more infos on routes here Production DatAtlas is not ready for production yet","title":"Home"},{"location":"#datatlas","text":"DatAtlas allows you to create a map of the territory on the fly by embedding data from different sources: open sourced data but also crowdsourced data All infos about the front and the back are stored here React Front using kepler.gl","title":"\ud83c\udf0d DatAtlas"},{"location":"#front-setup","text":"more infos here WIP","title":"Front Setup"},{"location":"#using-docker","text":"The easiest way to launch datAtlas can be by using docker-compose Clone the repo https://github.com/datatlas-erasme/front.git Copy env.example and rename it into .env Put your mapbox token in the .env file Launch DatAtlas docker-compose up Now you can access the server trough http://localhost:5007","title":"Using docker"},{"location":"#manually","text":"Requirements - nodejs - a mapbox api access token Clone the repo https://github.com/datatlas-erasme/front.git Copy env.example and rename it into .env Put your mapbox token in the .env file [WIP TODO] - Change the backend var URl Install and start npm npm install npm start","title":"Manually"},{"location":"#back-setup","text":"more infos here WIP","title":"Back Setup"},{"location":"#how-does-datatlas-work-wip","text":"Datatlas is made of a front and a back The front is a keplergl surcharged with a styling and theme management [WIP] The back is here to give the front the styling,dataset configuration and urls He is also able to handle notion tables he converts into a readable keplergl json format (and soon other unconventionnal data sources / unconventionnal => no geojson ) The front needs the back server to know : - wich data layers he needs to load - wich name he has (ex: Datatlas-Industries) - wich optionnal button he has (ex: crowdsourcing buttons to add a new point on the map) - how are the layers and filters configured by default two API routes are used for it : GET api/ more infos on routes here","title":"How does datatlas work [WIP]"},{"location":"#production","text":"DatAtlas is not ready for production yet","title":"Production"},{"location":"back/","text":"Back server API Routes WIP Get a dataset URL /api/data/{datasetId} Method GET Success Response: Returns a kepler.gl formated json of the dataset Code : 200 Content : { fields: {}, rows: {} } Udpate the layers conf URL /api/conf/ Udpate the instance conf","title":"Back"},{"location":"back/#back-server","text":"","title":"Back server"},{"location":"back/#api-routes-wip","text":"","title":"API Routes WIP"},{"location":"back/#get-a-dataset","text":"URL /api/data/{datasetId} Method GET Success Response: Returns a kepler.gl formated json of the dataset Code : 200 Content : { fields: {}, rows: {} }","title":"Get a dataset"},{"location":"back/#udpate-the-layers-conf","text":"URL /api/conf/","title":"Udpate the layers conf"},{"location":"back/#udpate-the-instance-conf","text":"","title":"Udpate the instance conf"},{"location":"front/","text":"Front","title":"Front"},{"location":"front/#front","text":"","title":"Front"}]}